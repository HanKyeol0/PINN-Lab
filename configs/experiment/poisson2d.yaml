# Toggle this:
time_dependent: false   # false -> Poisson; true -> Heat (time-dependent)

domain:
  x: [0.0, 1.0]
  y: [0.0, 1.0]
  t: [0.0, 1.0]

# --- Steady Poisson (ignored if time_dependent=true) ---
# u*(x,y) = sin(pi x) sin(pi y)  ->  -∇²u* = 2π² u*  => f(x,y) = 2π² u*
# Dirichlet BC from u*
poisson_ground_truth: "sin_sin"

# --- Heat equation parameters (used if time_dependent=true) ---
# Heat: u_t - kappa ∇²u = f. Choose u* = sin(pi x) sin(pi y) exp(-lambda t)
# ∇²u* = -2π² u*, u_t = -lambda u*, so residual = (-lambda + 2 kappa π²) u* - f.
# If lambda = 2 kappa π², then f ≡ 0 (homogeneous).
kappa: 1.0
lambda: auto            # "auto" -> lambda = 2*kappa*pi^2 (f=0); or set a number

# IMPORTANT: Set input dimension to match the toggle
in_features: 2          # set 3 when time_dependent: true
out_features: 1